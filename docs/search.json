[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "fusionACS",
    "section": "",
    "text": "Project overview\nA large amount of data concerning the experiences and wellbeing of American households is collected by surveys. Household surveys typically focus on a single topic – e.g. finances, housing, health – and field independent and relatively small samples. As a result, data users are often constrained by the particular variables and spatial resolution available in a single survey.\nThe fusionACS data science platform (Ummel et al. 2024) helps address this problem by statistically “fusing” microdata from disparate surveys to simulate a single, integrated, high-resolution survey. The resulting fused microdata can be used to perform analyses that would otherwise be impossible. At its core, fusionACS seeks to maximize the amount of useful information that can be extracted from the existing array of U.S. survey data.\nIn 2025, an enhanced version of fusionACS was introduced that integrates UrbanPop, a synthetic population data product produced by Oak Ridge National Laboratory (Tuccillo et al. 2023). UrbanPop provides probabilistic estimates of the location (block group) of each ACS respondent household. The fusionACS + UrbanPop platform is able to generate estimates for any donor survey variable for locales as small as individual census block groups.\n\n\nMethodology\nfusionACS uses the American Community Survey (ACS) – the largest U.S. household survey – as the “data backbone” of the fusion process. Variables in “donor” surveys are fused onto ACS Public Use Microdata Sample (PUMS) microdata to produce simulated values for variables unique to the donor. This generates probabilistic estimates of how ACS respondents might have answered a donor survey’s questionnaire. Respondent characteristics that are common to both the donor and the ACS (e.g. income, age, household size) – as well as spatial information that can be merged to both (e.g. characteristics of the local built environment) – are used as predictors variables in LightGBM machine learning models (Ke et al. 2017).\nSee the Methodology page for more information.\n\n\n\n\n\n\n\n\nUse cases\nSee the Publications page for more information.\n\n\n\n\n\nReferences\n\nKe, Guolin, Qi Meng, Thomas Finley, Taifeng Wang, Wei Chen, Weidong Ma, Qiwei Ye, and Tie-Yan Liu. 2017. “LightGBM: A Highly Efficient Gradient Boosting Decision Tree.” In Advances in Neural Information Processing Systems 30, 3149–57. https://papers.nips.cc/paper/6907-lightgbm-a-highly-efficient-gradient-boosting-decision-tree.\n\n\nTuccillo, Joseph V., Robert Stewart, Amy Rose, Nathan Trombley, Jessica Moehl, Nicholas Nagle, and Budhendra Bhaduri. 2023. “UrbanPop: A Spatial Microsimulation Framework for Exploring Demographic Influences on Human Dynamics.” Applied Geography 151: 102844. https://doi.org/10.1016/j.apgeog.2022.102844.\n\n\nUmmel, Kevin, Miguel Poblete-Cazenave, Karthik Akkiraju, Nick Graetz, Hero Ashman, Cora Kingdon, Steven Herrera Tenorio, Aaryaman Sunny Singhal, Daniel Aldana Cohen, and Narasimha D. Rao. 2024. “Multidimensional Well-Being of US Households at a Fine Spatial Scale Using Fused Household Surveys.” Scientific Data 11 (142). https://doi.org/10.1038/s41597-023-02788-7."
  },
  {
    "objectID": "usage.html",
    "href": "usage.html",
    "title": "Using the fusionACS package",
    "section": "",
    "text": "The experimental fusionACS R package allows users to access and analyze a “pseudo-sample” of the complete fusionACS database stored within the Yale High Performance Computing facility.\nThe complete database is prohibitively large for public dissemination and includes some data that cannot be shared. The pseudo-sample is an approximately 5% sample of ACS respondents (households and persons) for the period 2015-2019. In addition to all variables found in the ACS, it also includes all variables fused from donor surveys – currently limited to RECS 2020 for beta testing.\nImportantly, the sample includes plausible geographic identifiers – from census region down to individual census tracts – for each ACS household, obtained by sampling the underlying UrbanPop data in a way that ensures that all tracts nationwide are represented.\nSince the sample includes only a single fusion implicate, in addition to the other restrictions, the total amount of data released is only about 0.03% of the complete fusionACS database.\nWhile the sample data cannot be used to derive valid estimates, it can be used to understand the structure of the data, perform exploratory analysis, and design, refine, and test analyses. Our hope is that, eventually, it will be possible to remotely execute a valid analysis – designed and tested locally – using the complete fusionACS database and return the full “production” results to the user.\n\nPackage install and setup\nInstall the latest package version from Github.\ndevtools::install_github(\"ummel/fusionACS\")\nLoad the package.\n\nlibrary(fusionACS)\n\nDownload the latest fusionACS microdata psudeo-sample.\nget_microdata()\nThe data is automatically downloaded to a system-specific (and project-independent) location identified by the ‘rappdirs’ package. The path to the data files is accessible via get_directory(), but there is no particular reason to access it directly.\n\n\nAssemble microdata\nYou can view the data dictionary to see which surveys, year, and variables are available.\ndict = dictionary()\nView(dict)\nUse the assemble() function to obtain your desired subset of the pseudo-sample.\n\nExample 1\nAssemble household income (hincp), housing tenure (ten), and state of residence from the ACS, plus natural gas consumption (btung), square footage (totsqft_en), and the main space heating equipment type (equipm) from the 2020 RECS, plus pseudo-assignment of county and tract from UrbanPop. Return nationwide household data for ACS respondents in year 2019.\n\nmy.data = assemble(\n    variables = c(hincp, ten, btung, totsqft_en, equipm, state_name, county10, tract10), \n    year = 2019, \n    respondent = \"household\"\n)\n\nhead(my.data)\n\nKey: &lt;year, hid&gt;\n    year      hid weight  hincp\n   &lt;int&gt;    &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n1:  2019 10000043    126  54548\n2:  2019 10000061    159  64346\n3:  2019 10000070    160 281830\n4:  2019 10000071     95  39396\n5:  2019 10000102    224  40002\n6:  2019 10000114     62  63639\n                                                       ten btung totsqft_en\n                                                    &lt;fctr&gt; &lt;int&gt;      &lt;int&gt;\n1:                                                  Rented     0        750\n2:                                                  Rented     5       1250\n3:                                    Owned free and clear 52200       1820\n4:                                    Owned free and clear     0        900\n5:                                                  Rented 31300        970\n6: Owned with mortgage or loan (include home equity loans)     0       1860\n              equipm state_name county10 tract10\n              &lt;fctr&gt;     &lt;char&gt;    &lt;int&gt;   &lt;int&gt;\n1:   Central furnace      Texas      179  950700\n2:   Central furnace    Arizona       17  942500\n3:   Central furnace   Oklahoma      143    7801\n4:   Central furnace    Indiana       77  966200\n5:   Central furnace   Kentucky       67     900\n6: Central heat pump    Florida       31   14500\n\n\n\n\nExample 2\nSame as above but for years 2017-2019 and includes optional expressions to: 1) Restrict to households in the state of Texas that used natural gas; 2) Create a new variable (btung_per_ft2) that measures consumption per square foot; and 3) Remove btung and totsqft_en after creating the new variable, for convenience.\n\nmy.data = assemble(\n  variables = c(hincp, ten, btung, totsqft_en, equipm, state_name, county10, tract10), \n  year = 2017:2019, \n  respondent = \"household\", \n  btung &gt; 0, \n  state_name == \"Texas\", \n  btung_per_ft2 = btung / totsqft_en, \n  -c(btung, totsqft_en)\n)\n\nhead(my.data)\n\nKey: &lt;year, hid&gt;\n    year      hid weight  hincp\n   &lt;int&gt;    &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n1:  2017 10000422    343 168869\n2:  2017 10001536    172  37414\n3:  2017 10001571    350  35189\n4:  2017 10001689     75  27100\n5:  2017 10001697    135  43481\n6:  2017 10001735    158  60671\n                                                       ten\n                                                    &lt;fctr&gt;\n1: Owned with mortgage or loan (include home equity loans)\n2: Owned with mortgage or loan (include home equity loans)\n3:                                                  Rented\n4:                                    Owned free and clear\n5:                                                  Rented\n6:                                    Owned free and clear\n                                                                        equipm\n                                                                        &lt;fctr&gt;\n1: Built-in electric units installed in walls, ceilings, baseboards, or floors\n2:                                                             Central furnace\n3:                                                             Central furnace\n4:                                                             Central furnace\n5:                                                             Central furnace\n6:                                                        Wood or pellet stove\n   state_name county10 tract10 btung_per_ft2\n       &lt;char&gt;    &lt;int&gt;   &lt;int&gt;         &lt;num&gt;\n1:      Texas      245     302    16.8160920\n2:      Texas      367  140411    20.0000000\n3:      Texas      141    4002    37.6000000\n4:      Texas      201  340600    18.6192469\n5:      Texas      475  950200     0.9818182\n6:      Texas      113   15600    19.2380952\n\n\n\n\n\nAnalyze microdata\nUse the analyze() function to calculate means, medians, sums, proportions, and counts of specific variables, optionally across population subgroups. The analysis process uses the microdata sample you generated via assemble().\n\nExample 1\nCalculate mean natural gas consumption per square foot. Since no by argument is specified, the analysis applies to all observations in my.data; i.e. all households in Texas in 2017-2019 that used natural gas.\n\ntest &lt;- analyze(\n  data = my.data,\n  ~ mean(btung_per_ft2)\n)\n\nComputing estimates for numerical analyses:\n ~ mean(btung_per_ft2) \n\ntest\n\n# A tibble: 1 × 12\n  lhs         rhs   type  level N_eff   ubar b       est moe   se    df    cv   \n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;\n1 mean_btung… mean… mean  NA     5190 0.0444 NA     20.3 NA    NA    NA    NA   \n\n\nThe result has a single row, because no sub-populations were requested in this example. The results include a point estimate (est), but this is only an approximation since it is computed using a fraction of the complete database. No margin of error (moe) is returned, because the pseudo-sample does not contain the multiple fusion implicates necessary to estimate uncertainty.\n\n\nExample 2\nSame as above but also request median natural gas consumption per square foot and the proportion of households using each type of heating equipment (equipm). Calculate estimates for sub-populations defined by housing tenure (ten).\n\ntest &lt;- analyze(\n  data = my.data,\n  ~ mean(btung_per_ft2),\n  ~ median(btung_per_ft2),\n  ~ mean(equipm),\n  by = ten\n)\n\nComputing estimates for categorical analyses:\n ~ mean(equipm) \nComputing estimates for numerical analyses:\n ~ mean(btung_per_ft2)\n ~ median(btung_per_ft2) \n\ntest\n\n# A tibble: 48 × 13\n   lhs    rhs   type  ten   level  N_eff    ubar b         est moe   se    df   \n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;fct&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;lgl&gt;   &lt;dbl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;\n 1 mean_… mean… mean  Occu… &lt;NA&gt;    94.4 2.70e+0 NA    2.22e+1 NA    NA    NA   \n 2 mean_… mean… mean  Owne… &lt;NA&gt;  1848.  1.30e-1 NA    2.01e+1 NA    NA    NA   \n 3 mean_… mean… mean  Owne… &lt;NA&gt;  2178.  7.61e-2 NA    1.87e+1 NA    NA    NA   \n 4 mean_… mean… mean  Rent… &lt;NA&gt;  1129.  2.80e-1 NA    2.33e+1 NA    NA    NA   \n 5 media… medi… medi… Occu… &lt;NA&gt;    94.4 2.56e+0 NA    1.78e+1 NA    NA    NA   \n 6 media… medi… medi… Owne… &lt;NA&gt;  1848.  9.69e-2 NA    1.69e+1 NA    NA    NA   \n 7 media… medi… medi… Owne… &lt;NA&gt;  2178.  6.26e-2 NA    1.63e+1 NA    NA    NA   \n 8 media… medi… medi… Rent… &lt;NA&gt;  1129.  1.81e-1 NA    1.95e+1 NA    NA    NA   \n 9 mean_… mean… prop  Occu… No s…   94.4 2.35e-4 NA    9.00e-3 NA    NA    NA   \n10 mean_… mean… prop  Occu… Cent…   94.4 2.03e-3 NA    7.48e-1 NA    NA    NA   \n# ℹ 38 more rows\n# ℹ 1 more variable: cv &lt;lgl&gt;\n\n\nThe results suggest the typical (median) renter in Texas consumes more natural gas per square foot of living space than homeowners.\n\nsubset(test, rhs == \"median(btung_per_ft2)\", select = c(ten, est))\n\n# A tibble: 4 × 2\n  ten                                                       est\n  &lt;chr&gt;                                                   &lt;dbl&gt;\n1 Occupied without payment of rent                         17.8\n2 Owned free and clear                                     16.9\n3 Owned with mortgage or loan (include home equity loans)  16.3\n4 Rented                                                   19.5\n\n\n\n\nExample 3\nMean and median natural gas consumption per square foot, calculated (separately) for population subgroups defined by: 1) housing tenure; 2) housing tenure and heating equipment; and 3) census tract. This example illustrates how flexible the by argument can be.\n\ntest &lt;- analyze(\n  data = my.data,\n  ~ mean(btung_per_ft2),\n  ~ median(btung_per_ft2),\n  by = list(ten, c(ten, equipm), c(state_name, county10, tract10))\n)\n\nComputing estimates for numerical analyses:\n ~ mean(btung_per_ft2)\n ~ median(btung_per_ft2)"
  }
]